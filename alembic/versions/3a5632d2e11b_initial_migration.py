"""Initial migration

Revision ID: 3a5632d2e11b
Revises: 
Create Date: 2025-08-31 10:06:01.194418

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '3a5632d2e11b'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('challenge_templates',
    sa.Column('challenge_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('account_size', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('fee_amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('profit_target_pct', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('max_drawdown_pct', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('daily_loss_pct', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'ARCHIVED', name='challengestatus'), nullable=False),
    sa.PrimaryKeyConstraint('challenge_id')
    )
    op.create_table('subscription_plans',
    sa.Column('plan_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('type', sa.Enum('COPY_TRADE', 'ALGO', name='plantype'), nullable=False),
    sa.Column('price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('features', sa.JSON(), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'ARCHIVED', name='planstatus'), nullable=False),
    sa.PrimaryKeyConstraint('plan_id')
    )
    op.create_table('users',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('role', sa.Enum('TRADER', 'ADMIN', name='userrole'), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'BANNED', name='userstatus'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('accounts',
    sa.Column('account_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('type', sa.Enum('SIMULATED', 'COPY', 'ALGO', name='accounttype'), nullable=False),
    sa.Column('balance', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('account_id')
    )
    op.create_index(op.f('ix_accounts_user_id'), 'accounts', ['user_id'], unique=False)
    op.create_table('subscriptions',
    sa.Column('subscription_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('plan_id', sa.UUID(), nullable=False),
    sa.Column('start_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('end_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'EXPIRED', 'CANCELLED', name='subscriptionstatus'), nullable=False),
    sa.ForeignKeyConstraint(['plan_id'], ['subscription_plans.plan_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('subscription_id')
    )
    op.create_index(op.f('ix_subscriptions_plan_id'), 'subscriptions', ['plan_id'], unique=False)
    op.create_index(op.f('ix_subscriptions_user_id'), 'subscriptions', ['user_id'], unique=False)
    op.create_table('challenge_attempts',
    sa.Column('attempt_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('challenge_id', sa.UUID(), nullable=False),
    sa.Column('account_id', sa.UUID(), nullable=False),
    sa.Column('state', sa.Enum('ACTIVE', 'PASSED', 'FAILED', name='challengestate'), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('ended_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('metrics', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.account_id'], ),
    sa.ForeignKeyConstraint(['challenge_id'], ['challenge_templates.challenge_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('attempt_id')
    )
    op.create_index(op.f('ix_challenge_attempts_account_id'), 'challenge_attempts', ['account_id'], unique=False)
    op.create_index(op.f('ix_challenge_attempts_challenge_id'), 'challenge_attempts', ['challenge_id'], unique=False)
    op.create_index(op.f('ix_challenge_attempts_user_id'), 'challenge_attempts', ['user_id'], unique=False)
    op.create_table('trades',
    sa.Column('trade_id', sa.UUID(), nullable=False),
    sa.Column('account_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('instrument', sa.String(length=50), nullable=False),
    sa.Column('side', sa.Enum('BUY', 'SELL', name='tradeside'), nullable=False),
    sa.Column('qty', sa.Numeric(precision=15, scale=6), nullable=False),
    sa.Column('entry_price', sa.Numeric(precision=15, scale=6), nullable=False),
    sa.Column('stop_loss', sa.Numeric(precision=15, scale=6), nullable=True),
    sa.Column('take_profit', sa.Numeric(precision=15, scale=6), nullable=True),
    sa.Column('exit_price', sa.Numeric(precision=15, scale=6), nullable=True),
    sa.Column('pnl', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.account_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('trade_id')
    )
    op.create_index(op.f('ix_trades_account_id'), 'trades', ['account_id'], unique=False)
    op.create_index(op.f('ix_trades_instrument'), 'trades', ['instrument'], unique=False)
    op.create_index(op.f('ix_trades_timestamp'), 'trades', ['timestamp'], unique=False)
    op.create_index(op.f('ix_trades_user_id'), 'trades', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_trades_user_id'), table_name='trades')
    op.drop_index(op.f('ix_trades_timestamp'), table_name='trades')
    op.drop_index(op.f('ix_trades_instrument'), table_name='trades')
    op.drop_index(op.f('ix_trades_account_id'), table_name='trades')
    op.drop_table('trades')
    op.drop_index(op.f('ix_challenge_attempts_user_id'), table_name='challenge_attempts')
    op.drop_index(op.f('ix_challenge_attempts_challenge_id'), table_name='challenge_attempts')
    op.drop_index(op.f('ix_challenge_attempts_account_id'), table_name='challenge_attempts')
    op.drop_table('challenge_attempts')
    op.drop_index(op.f('ix_subscriptions_user_id'), table_name='subscriptions')
    op.drop_index(op.f('ix_subscriptions_plan_id'), table_name='subscriptions')
    op.drop_table('subscriptions')
    op.drop_index(op.f('ix_accounts_user_id'), table_name='accounts')
    op.drop_table('accounts')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('subscription_plans')
    op.drop_table('challenge_templates')
    # ### end Alembic commands ###
